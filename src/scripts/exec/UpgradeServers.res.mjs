// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flags from "../lib/Flags.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

var schema = {
  ram: Number.NaN,
  dry: false,
  help: false
};

async function main(ns) {
  var match = Flags.getFlagsExn(ns, schema);
  var flags = match[0];
  var ram = flags.ram;
  var dry = flags.dry;
  var maxRam = ns.getPurchasedServerMaxRam();
  if (flags.help) {
    ns.tprint("Upgrades purchased servers.\n--ram int : Servers' RAM which upgrades to, must be a power of 2.\n--dry : Only prints the info of upgrading servers, does not actually upgrade.");
    return ;
  }
  if (Number.isInteger(ram) && ram > 0.0 && Number.isInteger(Math.log2(ram)) && ram <= maxRam) {
    var servers = ns.getPurchasedServers();
    var cost = Core__Array.reduce(servers, 0.0, (function (c, server) {
            return c + Math.max(ns.getPurchasedServerUpgradeCost(server, ram), 0.0);
          }));
    ns.tprint("INFO: the full cost of upgrading all servers to RAM " + ns.formatRam(ram, undefined) + " is " + ns.formatNumber(cost, undefined, undefined, true));
    if (!dry) {
      servers.forEach(function (server) {
            if (!ns.upgradePurchasedServer(server, ram)) {
              ns.tprint("ERROR: failed to upgrade server " + server);
              return ;
            }
            
          });
      return ;
    } else {
      return ;
    }
  }
  var ramString = isNaN(ram) ? "" : " : " + ns.formatRam(ram, undefined);
  ns.tprint("ERROR: servers' RAM is missing, not an integer, less than 1, not a power of 2 or greater than the max RAM " + ns.formatRam(maxRam, undefined) + ramString);
}

function autocomplete(data, args) {
  var args$1 = Flags.argsToStrings(args);
  if (!Flags.argsHasHelp(args$1)) {
    var match = args$1.at(-1);
    if (match !== "--ram") {
      Flags.schemaToFlagsExn(data.flags, schema);
    }
    
  }
  return [];
}

export {
  schema ,
  main ,
  autocomplete ,
}
/* schema Not a pure module */
