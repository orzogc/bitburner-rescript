// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flags from "../../lib/Flags.res.mjs";
import * as Helpers from "../../lib/Helpers.res.mjs";
import * as GangUtils from "../../lib/GangUtils.res.mjs";

async function main(ns) {
  var match = Flags.getFlagsExn(ns, Flags.onlyHelpSchema);
  var gang = ns.gang;
  if (match[0].help) {
    ns.tprint("Auto manages a hacking gang.");
    return ;
  }
  if (gang.inGang()) {
    if (gang.getGangInformation().isHacking) {
      while(true) {
        var toAscend = {
          contents: undefined
        };
        var waitLonger = true;
        gang.getMemberNames().forEach((function(toAscend){
            return function (member) {
              var ascension = gang.getAscensionResult(member);
              if (ascension === undefined) {
                return ;
              }
              var match = toAscend.contents;
              if (match !== undefined && ascension.hack <= match[0]) {
                return ;
              } else {
                toAscend.contents = [
                  ascension.hack,
                  member
                ];
                return ;
              }
            }
            }(toAscend)));
        var match$1 = toAscend.contents;
        if (match$1 !== undefined) {
          var member = match$1[1];
          ns.print("INFO: ascending " + member + ", multiplier factor " + match$1[0].toString());
          if (await GangUtils.ascendAndBuyEquipments(ns, member)) {
            if (await GangUtils.train(ns, member, "Hacking", 300000)) {
              waitLonger = false;
            }
            
          } else {
            ns.print("ERROR: failed to ascend " + member);
          }
        }
        if (waitLonger) {
          await Helpers.sleep(ns, 600000);
        } else {
          await Helpers.sleep(ns, 300000);
        }
      };
      return ;
    }
    ns.tprint("ERROR: not in a hacking gang");
    return ;
  }
  ns.tprint("ERROR: not in a gang");
}

function autocomplete(data, args) {
  var args$1 = Flags.argsToStrings(args);
  if (!Flags.argsHasHelp(args$1)) {
    Flags.schemaToFlagsExn(data.flags, Flags.onlyHelpSchema);
  }
  return [];
}

var ascendScript = "/scripts/exec/gang/Ascend.res.js";

export {
  ascendScript ,
  main ,
  autocomplete ,
}
/* No side effect */
