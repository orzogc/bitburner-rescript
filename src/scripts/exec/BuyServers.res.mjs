// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flags from "../lib/Flags.res.mjs";

var schema = {
  ram: Number.NaN,
  count: Number.NaN,
  prefix: "myserver",
  continuous: false,
  dry: false,
  help: false
};

async function main(ns) {
  var match = Flags.getFlagsExn(ns, schema);
  var flags = match[0];
  var ram = flags.ram;
  var count = flags.count;
  var prefix = flags.prefix;
  var continuous = flags.continuous;
  var dry = flags.dry;
  var maxRam = ns.getPurchasedServerMaxRam();
  if (flags.help) {
    ns.tprint("Buys servers.\n--ram int : Servers' RAM, must be a power of 2.\n--count int : How many servers to buy. If not specified, buys servers as many as possible.\n--prefix string : Servers' hostname prefix. Defaults to 'myserver'.\n--continuous : Buys servers continuously.\n--dry : Only prints the info of buying servers, not actually buying.");
    return ;
  }
  if (Number.isInteger(ram) && ram > 0.0 && Number.isInteger(Math.log2(ram)) && ram <= maxRam) {
    if (isNaN(count) || Number.isInteger(count) && count > 0.0) {
      var maxCount = ns.getPurchasedServerLimit() - ns.getPurchasedServers().length | 0;
      var buyCount = isNaN(count) ? maxCount : Math.min(count | 0, maxCount);
      if (!isNaN(count) && buyCount !== (count | 0)) {
        ns.tprint("INFO: max count is " + buyCount.toString() + ", less than the count argument " + count.toString());
      }
      ns.tprint("INFO: the RAM of purchased servers: " + ns.formatRam(ram, undefined));
      ns.tprint("INFO: the count of servers to buy: " + buyCount.toString());
      var singleCost = ns.getPurchasedServerCost(ram);
      ns.tprint("INFO: a single server's cost: " + ns.formatNumber(singleCost, undefined, undefined, true) + " , full cost: " + ns.formatNumber(singleCost * buyCount, undefined, undefined, true));
      if (!dry && ram > 0.0 && buyCount > 0) {
        var n = 0;
        var shouldContinue = {
          contents: true
        };
        var breakOrSleep = async function () {
          if (continuous) {
            await ns.asleep(60000.0);
          } else {
            shouldContinue.contents = false;
          }
        };
        while(n < buyCount && shouldContinue.contents) {
          if (ns.getServerMoneyAvailable("home") >= singleCost) {
            if (ns.purchaseServer(prefix + "-" + n.toString(), ram).length > 0) {
              n = n + 1 | 0;
            } else {
              ns.print("ERROR: failed to buy a server");
              await breakOrSleep();
            }
          } else {
            await breakOrSleep();
          }
        };
        return ;
      }
      ns.tprint("INFO: no servers to buy");
      return ;
    }
    ns.tprint("ERROR: servers' count to buy is not an integer or less than 1: " + count.toString());
    return ;
  }
  var ramString = isNaN(ram) ? "" : " : " + ns.formatRam(ram, undefined);
  ns.tprint("ERROR: servers' RAM is missing, not an integer, less than 1, not a power of 2 or greater than the max RAM " + ns.formatRam(maxRam, undefined) + ramString);
}

function autocomplete(data, args) {
  var args$1 = Flags.argsToStrings(args);
  if (!Flags.argsHasHelp(args$1)) {
    var match = args$1.at(-1);
    if (match !== undefined) {
      switch (match) {
        case "--count" :
        case "--prefix" :
        case "--ram" :
            break;
        default:
          Flags.schemaToFlagsExn(data.flags, schema);
      }
    } else {
      Flags.schemaToFlagsExn(data.flags, schema);
    }
  }
  return [];
}

export {
  schema ,
  main ,
  autocomplete ,
}
/* schema Not a pure module */
