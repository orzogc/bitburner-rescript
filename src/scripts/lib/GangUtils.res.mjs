// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Helpers from "./Helpers.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function ascend(ns, memberName, buyOwnedEquipmentsOpt) {
  var buyOwnedEquipments = buyOwnedEquipmentsOpt !== undefined ? buyOwnedEquipmentsOpt : true;
  var gang = ns.gang;
  var equipments = gang.getMemberInformation(memberName).upgrades;
  var match = gang.ascendMember(memberName);
  if (match !== undefined) {
    if (buyOwnedEquipments) {
      equipments.forEach(function (equipment) {
            if (!gang.purchaseEquipment(memberName, equipment)) {
              ns.print("ERROR: falied to buy equipment " + equipment + " to " + memberName);
              return ;
            }
            
          });
    }
    return true;
  } else {
    return false;
  }
}

async function ascendAndBuyEquipments(ns, memberName) {
  var gang = ns.gang;
  var canContinue = true;
  var result = false;
  while(canContinue) {
    var cost = Core__Array.reduce(gang.getMemberInformation(memberName).upgrades, 0.0, (function (c, equipment) {
            return c + gang.getEquipmentCost(equipment);
          }));
    if (ns.getServerMoneyAvailable("home") >= cost) {
      result = ascend(ns, memberName, true);
      canContinue = false;
    } else {
      ns.print("INFO: waiting for enough money " + cost.toString() + " to buy equipments to " + memberName);
      await Helpers.sleep(ns, 60000);
    }
  };
  return result;
}

function trainTypeToString(trainType) {
  switch (trainType) {
    case "Combat" :
        return "Train Combat";
    case "Hacking" :
        return "Train Hacking";
    case "Charisma" :
        return "Train Charisma";
    
  }
}

async function train(ns, memberName, trainType, millisecondsOpt) {
  var milliseconds = millisecondsOpt !== undefined ? millisecondsOpt : 300000;
  var gang = ns.gang;
  var trainType$1 = trainTypeToString(trainType);
  var taskNames = gang.getTaskNames();
  var oldTask = gang.getMemberInformation(memberName).task;
  if (taskNames.some(function (task) {
          return task === trainType$1;
        }) && taskNames.some(function (task) {
          return task === oldTask;
        })) {
    ns.print("INFO: start training " + memberName + ": " + trainType$1);
    if (gang.setMemberTask(memberName, trainType$1)) {
      await Helpers.sleep(ns, milliseconds);
      var currentTask = gang.getMemberInformation(memberName).task;
      if (currentTask === trainType$1) {
        if (gang.setMemberTask(memberName, oldTask)) {
          ns.print("SUCCESS: stop training " + memberName + ": " + trainType$1);
          return true;
        } else {
          ns.print("ERROR: failed to set task " + oldTask + " to " + memberName);
          return false;
        }
      } else {
        ns.print("INFO: gang member " + memberName + " is doing task " + currentTask + ", so does not set the original task " + oldTask);
        return true;
      }
    }
    ns.print("ERROR: failed to train " + memberName + ": " + trainType$1);
    return false;
  }
  ns.print("ERROR: missing " + trainType$1 + " or " + oldTask + " in tasks");
  return false;
}

export {
  ascend ,
  ascendAndBuyEquipments ,
  trainTypeToString ,
  train ,
}
/* No side effect */
